interface Account {
    sub: string;
    name: string;
    username: string;
    givenName: string;
    familyName: string;
    email: string;
    emailVerified: boolean;
}
interface ActiveCitizen {
    saId: string;
    name: string;
    wallet: string;
}
interface IUser {
    account: Account;
    activeCitizen: ActiveCitizen;
}

interface IAuthenticateGame {
    gameId: string;
    apiKey: string;
}
declare class Auth {
    constructor();
    protected authenticateUser(): Promise<{
        user: IUser;
    }>;
    protected authenticateGame(params: IAuthenticateGame): Promise<void>;
}

interface IPaging {
    limit: string;
    offset: number;
}
interface ISearch {
    [key: string]: any;
}
interface IFilter {
    key: string;
    option: string[];
}
interface ISort {
    key: string;
    direction: number;
}
interface IPagination {
    paging?: IPaging;
    search?: ISearch;
    filter?: IFilter[];
    sort?: ISort[];
}

interface IPlayResult {
    score: number;
}
declare class GameMatch {
    readonly gameId: string;
    readonly apiKey: string;
    constructor(gameId: string, apiKey: string);
    startMatch(): Promise<any>;
    joinMatch(matchId: string): Promise<any>;
    completeMatch(matchId: string, result: IPlayResult): Promise<any>;
    protected getMatchHistoryById(matchId: string): Promise<any>;
    protected getAllMatchHistory(props: IPagination): Promise<any>;
}

declare enum FRIEND_RESPONSE {
    CONFIRM = "CONFIRM",
    DENY = "DENY"
}
declare class UserFriend implements Auth {
    private user;
    constructor(user: IUser);
    getFriendList(): Promise<any>;
    sendFriendInvitation(friendId: string): Promise<any>;
    responseFriendInvitation(friendId: string, responseStatus: FRIEND_RESPONSE): Promise<any>;
    getFriendInvitationList(): Promise<any>;
    inviteGame(gameName: string, gameUrl: string, matchId: string, friendId: string): Promise<any>;
}
interface UserFriend extends Auth {
}

declare class UserBalance implements Auth {
    private user;
    constructor(user: IUser);
    getTicket(): Promise<any>;
    getActionPoint(): Promise<any>;
}
interface UserBalance extends Auth {
}

declare class UserAccount implements Auth {
    private user;
    constructor(user: IUser);
    getSub(): string;
    getEmail(): string;
    getName(): string;
    getUsername(): string;
    getGivenName(): string;
    getFamilyName(): string;
}
interface UserAccount extends Auth {
}

declare class UserQuest implements Auth {
    private user;
    constructor(user: IUser);
    getProcess(): Promise<{
        quests: any;
    }>;
    claim(questId: string): Promise<any>;
}
interface UserQuest extends Auth {
}

declare class UserCitizen implements Auth {
    private user;
    constructor(user: IUser);
    getSaId(): string;
    getCitizenName(): string;
    getCitizenWallet(): string;
}
interface UserCitizen extends Auth {
}

declare class User implements Auth {
    account: UserAccount | undefined;
    citizen: UserCitizen | undefined;
    balance: UserBalance | undefined;
    quest: UserQuest | undefined;
    friend: UserFriend | undefined;
    constructor(user: IUser);
}
interface User extends Auth {
}

declare class Quest {
    private gameId;
    constructor(gameId: string);
    protected getList(props: IPagination): Promise<{
        data: any;
    }>;
}

declare class Achievement {
    private gameId;
    constructor(gameId: string);
    protected getList(props: IPagination): Promise<{
        data: any;
    }>;
}

declare class GameClient implements Auth, GameMatch {
    readonly gameId: string;
    readonly apiKey: string;
    user: User | undefined;
    match: GameMatch | undefined;
    quest: Quest | undefined;
    achievement: Achievement | undefined;
    constructor(gameId: string, apiKey: string);
    initAsync(): Promise<void>;
}
interface GameClient extends Auth, GameMatch {
}

export { GameClient as default };
